PREREQUISITE:

  1. preparing a ubuntu 18.04 x64 host equipped with a NVIDIA video card that s
     upports CUDA.

  2. Install Nvidia Drivers from the following website:

     https://www.linuxbabe.com/desktop-linux/switch-intel-nvidia-graphics-card-ubuntu

  3. Install CUDA Toolkit 10 from the website:

     https://gist.github.com/bogdan-kulynych/f64eb148eeef9696c70d485a76e42c3a

  4. Download Isaac SDK Nightly Release 05/28 from the following website:

     https://developer.nvidia.com/isaac/downloads

     Download current version, isaac-sdk-2019.2-30e21124.tar.xz, to ~/Downloads

  5. git clone the stereo_ae400 workspace by the following commands:

     $ cd ~/Download
     $ git clone https://github.com/lips-hci/stereo_ae400.git



To build the isaac SDK:

step 0. create an isaac folder under ~/Downloads and untar the isaac SDK into it
  $ mkdir -p ~/Downloads/isaac
  $ cd ~/Downloads
  $ tar Jxvpf isaac-sdk-2019.2-30e21124.tar.xz -C isaac

step 1. modify the path in the WORKSPACE under the stereo_ae400 folder.

  local_repository(
      name = "com_nvidia_isaac",
      path = "/home/jsm/Downloads/isaac", # sepcify ISAAC_SDK location here
  )

step 2. build our app under stereo_ae400 folder.("NOTE: make sure your host
        can access to Internet", or you will get build errors)

  $ cd ~/Downloads/stereo_ae400
  $ bazel build //app/ae400_camera

step 3. (optional) assign the server NEW ip address (default AE400 ip is 
        192.168.0.100)

  Open a webbrowser and input http://192.168.0.100/ will show you the
  configurateion page. log in and change the ip address if you need.

  $ sudo mkdir -p /usr/etc/LIPS/lib
  $ sudo cp /config/network.json /usr/etc/LIPS/lib/
  $ vi /usr/etc/LIPS/lib/network.json  //change the ip you want

  note: If we have a file, network.json, it will use it first. Otherwise, 
  it will use defult ip (192.168.0.100)

step 4. run the app we build locally. (please make sure the host, AE400, and a
        remote machine are at the same network domain)

  $ bazel run //app/ae400_camera

  open a web brower, connect to http://local_ip:3000 and enable Channel(check
  the checkbox) to check the result

step 5. deploy the app we build to jetson-nano(robot) remotely if you have
        a jetson-nano robot

  # format:  deplay.sh --remote_user <username_on_robot> -p
             //app/ae400_camera:ae400_camera-pkg -d jetpack42
             -h <robot_ip> -u <insatll_home_name_you_want>
  
  $ ./deploy.sh --remote_user lips -p //app/ae400_camera:ae400_camera-pkg \
    -d jetpack42 -h 172.24.33.27 -u dt

step 6. run it on the robot.
  On our local host, 
  -1- Make sure you have an SSH key on your desktop machine.
    $ ssh-keygen
  -2- 
    $ ssh-copy-id <username_on_robot>@<robot_ip>
  (if you do -1- and -2- above, you won't input passwd when you connects to
   robot by ssh)

  $ ssh ROBOTUSER@ROBOTIP
  $ cd ~/deploy/<install_home_name_you_want>/ae400_camera-pkg
  $ ./app/ae400_camera/ae400_camera
  $ exit
  
  open a web brower, connect to http://<robot_ip>:3000, and enable Channel
  (check the checkbox) to check the result

step 7. Enjoy!
